<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
  http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<context:component-scan base-package="com.antkiller.jobs" />

    <job id="antJob"
        xmlns="http://www.springframework.org/schema/batch">
        <step id="antKillerStep">
            <tasklet ref="priceInfoTasklet" />
        </step>
    </job>


    <!-- Tasklet -->
    <!-- scope은 빈을 어떻게 생성할지 결정한다. 세개의 scope 종류를 보자.
        - step: 각 스텝마다 스텝에 종속된 고유한 빈을 만든다.
        - prototype: 빈을 reference (참조) 할 때마다 새로운 빈을 반환한다.
        - singleton: 배치 job이 생성될 때 하나의 고유한 빈을 만든다.
    -->
     <bean id="corpInfoTasklet"
        class="com.antkiller.jobs.tasklet.CorpInfoTasklet" scope="step" />
        
    <bean id="stockInfoTasklet"
        class="com.antkiller.jobs.tasklet.StockInfoTasklet" scope="step" />
        
    <bean id="priceInfoTasklet"
        class="com.antkiller.jobs.tasklet.PriceInfoTasklet" scope="step" />
        
    <bean id="antKillerService"
        class="com.antkiller.jobs.service.AntKillerService"/>
        
    <bean id="antKillerDAO"
        class="com.antkiller.jobs.dao.AntKillerDAO"/>
        
    <!-- Misc Beans -->
    <!-- 해당 섹션에 있는 빈들은 별도의 xml로 관리하는 것이 좋다.
        재사용을 위해 나중에 common.xml을 만들어보자. -->


    <!-- 스프링 배치의 metadata를 담당하는 빈. -->
    <bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
    </bean>

    <!-- 스프링 배치 job을 실행하는 빈. -->
    <bean id="jobLauncher"
        class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

    <!-- 스프링 배치 job을 테스트할 때 쓰는 유틸리티. -->
    <bean id="jobLauncherTestUtils"
        class="org.springframework.batch.test.JobLauncherTestUtils" />
        
	<!-- MariaDB JDBC DataSource -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.mariadb.jdbc.Driver" />
		<property name="url" value="jdbc:mariadb://127.0.0.1:3306/sys" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>
    
	<!-- mybatis SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis-config.xml" />
        	<property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" />
	</bean>
</beans>